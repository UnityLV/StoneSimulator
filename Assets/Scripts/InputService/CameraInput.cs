//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/InputService/CameraInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @CameraInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @CameraInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""CameraInput"",
    ""maps"": [
        {
            ""name"": ""CameraTouch"",
            ""id"": ""6b9ae2b3-71d3-4c39-b251-0116129c550a"",
            ""actions"": [
                {
                    ""name"": ""Swipe"",
                    ""type"": ""Value"",
                    ""id"": ""8d1f7772-4994-4af2-8c3d-b6cae89fc758"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""TouchOnePosition"",
                    ""type"": ""Value"",
                    ""id"": ""205c1635-f5bb-4354-8d83-2f9923823e26"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""TouchTwoPosition"",
                    ""type"": ""Value"",
                    ""id"": ""032d2d9a-e80a-4180-800f-25df18ae3f46"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""TouchContact"",
                    ""type"": ""Button"",
                    ""id"": ""d3bdd599-7e4e-47ed-ad8c-40834acd4f25"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""0e175da9-caab-486a-ad91-b86a1884fce7"",
                    ""path"": ""<Touchscreen>/primaryTouch/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Phone"",
                    ""action"": ""Swipe"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""81f68e6a-fd86-4b40-9c63-72346c184bff"",
                    ""path"": ""<Touchscreen>/touch0/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Phone"",
                    ""action"": ""TouchOnePosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ac3fbc38-8ca3-4784-9eb5-c779e09383f3"",
                    ""path"": ""<Touchscreen>/touch1/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Phone"",
                    ""action"": ""TouchTwoPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0a1a69b2-f180-4f2a-a7dd-014afa2bdb37"",
                    ""path"": ""<Touchscreen>/touch1/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Phone"",
                    ""action"": ""TouchContact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""CameraMouse"",
            ""id"": ""1dbf50fe-87ce-4785-9a49-a9bb00c42311"",
            ""actions"": [
                {
                    ""name"": ""Zoom"",
                    ""type"": ""PassThrough"",
                    ""id"": ""87090faf-498c-46e1-ad1d-bce5d38bcdca"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Drag"",
                    ""type"": ""Button"",
                    ""id"": ""d422a45d-35fc-4b95-97c1-793ad7ce0c63"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""DragDelta"",
                    ""type"": ""Value"",
                    ""id"": ""91dd6bd3-b834-49e2-96fa-233774f4bf8d"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""ae703c15-e0d4-4697-a6ce-6b592cd5d4e4"",
                    ""path"": ""<Mouse>/scroll/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""MK"",
                    ""action"": ""Zoom"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e3963a5b-2960-406f-88fd-6d091dfaaeae"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Drag"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1fd3b62e-875d-49aa-b152-faf823ecb5f7"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DragDelta"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Phone"",
            ""bindingGroup"": ""Phone"",
            ""devices"": [
                {
                    ""devicePath"": ""<Touchscreen>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""MK"",
            ""bindingGroup"": ""MK"",
            ""devices"": [
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // CameraTouch
        m_CameraTouch = asset.FindActionMap("CameraTouch", throwIfNotFound: true);
        m_CameraTouch_Swipe = m_CameraTouch.FindAction("Swipe", throwIfNotFound: true);
        m_CameraTouch_TouchOnePosition = m_CameraTouch.FindAction("TouchOnePosition", throwIfNotFound: true);
        m_CameraTouch_TouchTwoPosition = m_CameraTouch.FindAction("TouchTwoPosition", throwIfNotFound: true);
        m_CameraTouch_TouchContact = m_CameraTouch.FindAction("TouchContact", throwIfNotFound: true);
        // CameraMouse
        m_CameraMouse = asset.FindActionMap("CameraMouse", throwIfNotFound: true);
        m_CameraMouse_Zoom = m_CameraMouse.FindAction("Zoom", throwIfNotFound: true);
        m_CameraMouse_Drag = m_CameraMouse.FindAction("Drag", throwIfNotFound: true);
        m_CameraMouse_DragDelta = m_CameraMouse.FindAction("DragDelta", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // CameraTouch
    private readonly InputActionMap m_CameraTouch;
    private List<ICameraTouchActions> m_CameraTouchActionsCallbackInterfaces = new List<ICameraTouchActions>();
    private readonly InputAction m_CameraTouch_Swipe;
    private readonly InputAction m_CameraTouch_TouchOnePosition;
    private readonly InputAction m_CameraTouch_TouchTwoPosition;
    private readonly InputAction m_CameraTouch_TouchContact;
    public struct CameraTouchActions
    {
        private @CameraInput m_Wrapper;
        public CameraTouchActions(@CameraInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Swipe => m_Wrapper.m_CameraTouch_Swipe;
        public InputAction @TouchOnePosition => m_Wrapper.m_CameraTouch_TouchOnePosition;
        public InputAction @TouchTwoPosition => m_Wrapper.m_CameraTouch_TouchTwoPosition;
        public InputAction @TouchContact => m_Wrapper.m_CameraTouch_TouchContact;
        public InputActionMap Get() { return m_Wrapper.m_CameraTouch; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CameraTouchActions set) { return set.Get(); }
        public void AddCallbacks(ICameraTouchActions instance)
        {
            if (instance == null || m_Wrapper.m_CameraTouchActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CameraTouchActionsCallbackInterfaces.Add(instance);
            @Swipe.started += instance.OnSwipe;
            @Swipe.performed += instance.OnSwipe;
            @Swipe.canceled += instance.OnSwipe;
            @TouchOnePosition.started += instance.OnTouchOnePosition;
            @TouchOnePosition.performed += instance.OnTouchOnePosition;
            @TouchOnePosition.canceled += instance.OnTouchOnePosition;
            @TouchTwoPosition.started += instance.OnTouchTwoPosition;
            @TouchTwoPosition.performed += instance.OnTouchTwoPosition;
            @TouchTwoPosition.canceled += instance.OnTouchTwoPosition;
            @TouchContact.started += instance.OnTouchContact;
            @TouchContact.performed += instance.OnTouchContact;
            @TouchContact.canceled += instance.OnTouchContact;
        }

        private void UnregisterCallbacks(ICameraTouchActions instance)
        {
            @Swipe.started -= instance.OnSwipe;
            @Swipe.performed -= instance.OnSwipe;
            @Swipe.canceled -= instance.OnSwipe;
            @TouchOnePosition.started -= instance.OnTouchOnePosition;
            @TouchOnePosition.performed -= instance.OnTouchOnePosition;
            @TouchOnePosition.canceled -= instance.OnTouchOnePosition;
            @TouchTwoPosition.started -= instance.OnTouchTwoPosition;
            @TouchTwoPosition.performed -= instance.OnTouchTwoPosition;
            @TouchTwoPosition.canceled -= instance.OnTouchTwoPosition;
            @TouchContact.started -= instance.OnTouchContact;
            @TouchContact.performed -= instance.OnTouchContact;
            @TouchContact.canceled -= instance.OnTouchContact;
        }

        public void RemoveCallbacks(ICameraTouchActions instance)
        {
            if (m_Wrapper.m_CameraTouchActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICameraTouchActions instance)
        {
            foreach (var item in m_Wrapper.m_CameraTouchActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CameraTouchActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CameraTouchActions @CameraTouch => new CameraTouchActions(this);

    // CameraMouse
    private readonly InputActionMap m_CameraMouse;
    private List<ICameraMouseActions> m_CameraMouseActionsCallbackInterfaces = new List<ICameraMouseActions>();
    private readonly InputAction m_CameraMouse_Zoom;
    private readonly InputAction m_CameraMouse_Drag;
    private readonly InputAction m_CameraMouse_DragDelta;
    public struct CameraMouseActions
    {
        private @CameraInput m_Wrapper;
        public CameraMouseActions(@CameraInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Zoom => m_Wrapper.m_CameraMouse_Zoom;
        public InputAction @Drag => m_Wrapper.m_CameraMouse_Drag;
        public InputAction @DragDelta => m_Wrapper.m_CameraMouse_DragDelta;
        public InputActionMap Get() { return m_Wrapper.m_CameraMouse; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CameraMouseActions set) { return set.Get(); }
        public void AddCallbacks(ICameraMouseActions instance)
        {
            if (instance == null || m_Wrapper.m_CameraMouseActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CameraMouseActionsCallbackInterfaces.Add(instance);
            @Zoom.started += instance.OnZoom;
            @Zoom.performed += instance.OnZoom;
            @Zoom.canceled += instance.OnZoom;
            @Drag.started += instance.OnDrag;
            @Drag.performed += instance.OnDrag;
            @Drag.canceled += instance.OnDrag;
            @DragDelta.started += instance.OnDragDelta;
            @DragDelta.performed += instance.OnDragDelta;
            @DragDelta.canceled += instance.OnDragDelta;
        }

        private void UnregisterCallbacks(ICameraMouseActions instance)
        {
            @Zoom.started -= instance.OnZoom;
            @Zoom.performed -= instance.OnZoom;
            @Zoom.canceled -= instance.OnZoom;
            @Drag.started -= instance.OnDrag;
            @Drag.performed -= instance.OnDrag;
            @Drag.canceled -= instance.OnDrag;
            @DragDelta.started -= instance.OnDragDelta;
            @DragDelta.performed -= instance.OnDragDelta;
            @DragDelta.canceled -= instance.OnDragDelta;
        }

        public void RemoveCallbacks(ICameraMouseActions instance)
        {
            if (m_Wrapper.m_CameraMouseActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICameraMouseActions instance)
        {
            foreach (var item in m_Wrapper.m_CameraMouseActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CameraMouseActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CameraMouseActions @CameraMouse => new CameraMouseActions(this);
    private int m_PhoneSchemeIndex = -1;
    public InputControlScheme PhoneScheme
    {
        get
        {
            if (m_PhoneSchemeIndex == -1) m_PhoneSchemeIndex = asset.FindControlSchemeIndex("Phone");
            return asset.controlSchemes[m_PhoneSchemeIndex];
        }
    }
    private int m_MKSchemeIndex = -1;
    public InputControlScheme MKScheme
    {
        get
        {
            if (m_MKSchemeIndex == -1) m_MKSchemeIndex = asset.FindControlSchemeIndex("MK");
            return asset.controlSchemes[m_MKSchemeIndex];
        }
    }
    public interface ICameraTouchActions
    {
        void OnSwipe(InputAction.CallbackContext context);
        void OnTouchOnePosition(InputAction.CallbackContext context);
        void OnTouchTwoPosition(InputAction.CallbackContext context);
        void OnTouchContact(InputAction.CallbackContext context);
    }
    public interface ICameraMouseActions
    {
        void OnZoom(InputAction.CallbackContext context);
        void OnDrag(InputAction.CallbackContext context);
        void OnDragDelta(InputAction.CallbackContext context);
    }
}
